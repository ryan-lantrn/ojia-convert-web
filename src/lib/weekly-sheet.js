const jsPDF = require('jspdf');
const { format, startOfWeek, endOfWeek } = require('date-fns');
const path = require('path');
const { writeFile, mkdir } = require('fs/promises');
const { UPLOAD_DIR } = require('./upload');

async function generateWeeklySheet(notices, publication, weekStart) {
  try {
    const weekEnd = endOfWeek(weekStart, { weekStartsOn: 1 });
    const weekStartFormatted = format(weekStart, 'MMM d');
    const weekEndFormatted = format(weekEnd, 'MMM d, yyyy');
    
    // Create PDF document
    const doc = new jsPDF();
    
    // Set up document properties
    doc.setProperties({
      title: `Weekly Notice Sheet - ${weekStartFormatted} - ${weekEndFormatted}`,
      subject: 'Public Notices Weekly Compilation',
      author: publication.name,
      creator: 'Lantrn Web Convert'
    });

    // Header
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text(publication.name, 20, 20);
    
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(`Weekly Notice Sheet: ${weekStartFormatted} - ${weekEndFormatted}`, 20, 30);
    
    if (publication.address) {
      doc.text(publication.address, 20, 40);
    }
    
    let yPos = 60;

    // Publication info
    if (publication.phone || publication.email) {
      doc.setFontSize(10);
      let contactInfo = [];
      if (publication.phone) contactInfo.push(`Phone: ${publication.phone}`);
      if (publication.email) contactInfo.push(`Email: ${publication.email}`);
      doc.text(contactInfo.join(' | '), 20, yPos);
      yPos += 15;
    }

    // Notices section
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Public Notices', 20, yPos);
    yPos += 15;

    if (notices.length === 0) {
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text('No notices scheduled for this week.', 20, yPos);
    } else {
      notices.forEach((notice, index) => {
        // Check if we need a new page
        if (yPos > 250) {
          doc.addPage();
          yPos = 20;
        }

        // Notice header
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        doc.text(`${index + 1}. ${notice.title}`, 20, yPos);
        yPos += 10;

        // Notice date and status
        doc.setFontSize(9);
        doc.setFont('helvetica', 'normal');
        doc.text(`Scheduled: ${format(notice.scheduledDate, 'EEEE, MMMM d, yyyy')} | Status: ${notice.status}`, 25, yPos);
        yPos += 10;

        // Notice content
        if (notice.content) {
          doc.setFontSize(9);
          doc.setFont('helvetica', 'normal');
          
          // Split content into lines that fit within the page width
          const splitContent = doc.splitTextToSize(notice.content, 170);
          
          splitContent.forEach((line) => {
            if (yPos > 280) {
              doc.addPage();
              yPos = 20;
            }
            doc.text(line, 25, yPos);
            yPos += 5;
          });
        }
        
        yPos += 10; // Space between notices
      });
    }

    // Footer
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setFont('helvetica', 'normal');
      doc.text(
        `Generated by Lantrn Web Convert on ${format(new Date(), 'MMM d, yyyy')} | Page ${i} of ${pageCount}`,
        20,
        doc.internal.pageSize.height - 10
      );
    }

    // Save the PDF
    const fileName = `weekly-sheet-${format(weekStart, 'yyyy-MM-dd')}.pdf`;
    const filePath = path.join('weekly-sheets', fileName);
    const fullPath = path.join(UPLOAD_DIR, filePath);

    // Ensure directory exists
    const dir = path.dirname(fullPath);
    try {
      await mkdir(dir, { recursive: true });
    } catch (err) {
      // Directory might already exist
    }

    // Convert PDF to buffer and save
    const pdfBuffer = Buffer.from(doc.output('arraybuffer'));
    await writeFile(fullPath, pdfBuffer);

    return filePath;
  } catch (error) {
    console.error('Weekly sheet generation error:', error);
    throw new Error('Failed to generate weekly sheet');
  }
}

module.exports = {
  generateWeeklySheet
};